Ok { comments = [Node { end = { column = 3, row = 21 }, start = { column = 1, row = 11 } } "{-|\n\n@docs inToken\n\n@docs equal, parensEnd\n@docs isAllowedOperatorToken, isOperatorSymbolChar\n\n@docs characterLiteralMapWithRange, singleOrTripleQuotedStringLiteralMapWithRange\n@docs functionName, functionNameNode, functionNameMapWithRange, functionNameNotInfixNode, typeName, typeNameNode, typeNameMapWithRange\n\n-}",Node { end = { column = 19, row = 68 }, start = { column = 9, row = 68 } } "--\"infixr\"",Node { end = { column = 19, row = 69 }, start = { column = 9, row = 69 } } "--\"infixl\"",Node { end = { column = 61, row = 73 }, start = { column = 9, row = 73 } } "-- \"infix\" Apparently this is not a reserved keyword",Node { end = { column = 61, row = 74 }, start = { column = 9, row = 74 } } "-- \"alias\" Apparently this is not a reserved keyword",Node { end = { column = 122, row = 94 }, start = { column = 9, row = 94 } } "-- Eventhough Elm-format will change \\r to a unicode version. When you dont use elm-format, this will not happen.",Node { end = { column = 15, row = 188 }, start = { column = 9, row = 188 } } "-- 'F'"], declarations = [Node { end = { column = 17, row = 79 }, start = { column = 1, row = 29 } } (FunctionDeclaration { declaration = Node { end = { column = 17, row = 79 }, start = { column = 1, row = 30 } } { arguments = [Node { end = { column = 19, row = 30 }, start = { column = 15, row = 30 } } (VarPattern "name")], expression = Node { end = { column = 17, row = 79 }, start = { column = 5, row = 31 } } (CaseExpression { cases = [[Node { end = { column = 17, row = 32 }, start = { column = 9, row = 32 } } (StringPattern "module"),Node { end = { column = 18, row = 33 }, start = { column = 13, row = 33 } } (FunctionOrValue [] "False")],[Node { end = { column = 19, row = 35 }, start = { column = 9, row = 35 } } (StringPattern "exposing"),Node { end = { column = 18, row = 36 }, start = { column = 13, row = 36 } } (FunctionOrValue [] "False")],[Node { end = { column = 17, row = 38 }, start = { column = 9, row = 38 } } (StringPattern "import"),Node { end = { column = 18, row = 39 }, start = { column = 13, row = 39 } } (FunctionOrValue [] "False")],[Node { end = { column = 13, row = 41 }, start = { column = 9, row = 41 } } (StringPattern "as"),Node { end = { column = 18, row = 42 }, start = { column = 13, row = 42 } } (FunctionOrValue [] "False")],[Node { end = { column = 13, row = 44 }, start = { column = 9, row = 44 } } (StringPattern "if"),Node { end = { column = 18, row = 45 }, start = { column = 13, row = 45 } } (FunctionOrValue [] "False")],[Node { end = { column = 15, row = 47 }, start = { column = 9, row = 47 } } (StringPattern "then"),Node { end = { column = 18, row = 48 }, start = { column = 13, row = 48 } } (FunctionOrValue [] "False")],[Node { end = { column = 15, row = 50 }, start = { column = 9, row = 50 } } (StringPattern "else"),Node { end = { column = 18, row = 51 }, start = { column = 13, row = 51 } } (FunctionOrValue [] "False")],[Node { end = { column = 14, row = 53 }, start = { column = 9, row = 53 } } (StringPattern "let"),Node { end = { column = 18, row = 54 }, start = { column = 13, row = 54 } } (FunctionOrValue [] "False")],[Node { end = { column = 13, row = 56 }, start = { column = 9, row = 56 } } (StringPattern "in"),Node { end = { column = 18, row = 57 }, start = { column = 13, row = 57 } } (FunctionOrValue [] "False")],[Node { end = { column = 15, row = 59 }, start = { column = 9, row = 59 } } (StringPattern "case"),Node { end = { column = 18, row = 60 }, start = { column = 13, row = 60 } } (FunctionOrValue [] "False")],[Node { end = { column = 13, row = 62 }, start = { column = 9, row = 62 } } (StringPattern "of"),Node { end = { column = 18, row = 63 }, start = { column = 13, row = 63 } } (FunctionOrValue [] "False")],[Node { end = { column = 15, row = 65 }, start = { column = 9, row = 65 } } (StringPattern "port"),Node { end = { column = 18, row = 66 }, start = { column = 13, row = 66 } } (FunctionOrValue [] "False")],[Node { end = { column = 15, row = 70 }, start = { column = 9, row = 70 } } (StringPattern "type"),Node { end = { column = 18, row = 71 }, start = { column = 13, row = 71 } } (FunctionOrValue [] "False")],[Node { end = { column = 16, row = 75 }, start = { column = 9, row = 75 } } (StringPattern "where"),Node { end = { column = 18, row = 76 }, start = { column = 13, row = 76 } } (FunctionOrValue [] "False")],[Node { end = { column = 10, row = 78 }, start = { column = 9, row = 78 } } AllPattern,Node { end = { column = 17, row = 79 }, start = { column = 13, row = 79 } } (FunctionOrValue [] "True")]], expression = Node { end = { column = 14, row = 31 }, start = { column = 10, row = 31 } } (FunctionOrValue [] "name") }), name = Node { end = { column = 14, row = 30 }, start = { column = 1, row = 30 } } "isNotReserved" }, documentation = Nothing, signature = Just (Node { end = { column = 31, row = 29 }, start = { column = 1, row = 29 } } { name = Node { end = { column = 14, row = 29 }, start = { column = 1, row = 29 } } "isNotReserved", typeAnnotation = Node { end = { column = 31, row = 29 }, start = { column = 17, row = 29 } } (FunctionTypeAnnotation (Node { end = { column = 23, row = 29 }, start = { column = 17, row = 29 } } (Typed (Node { end = { column = 23, row = 29 }, start = { column = 17, row = 29 } } ([],"String")) [])) (Node { end = { column = 31, row = 29 }, start = { column = 27, row = 29 } } (Typed (Node { end = { column = 31, row = 29 }, start = { column = 27, row = 29 } } ([],"Bool")) []))) }) }),Node { end = { column = 31, row = 84 }, start = { column = 1, row = 82 } } (FunctionDeclaration { declaration = Node { end = { column = 31, row = 84 }, start = { column = 1, row = 83 } } { arguments = [], expression = Node { end = { column = 31, row = 84 }, start = { column = 5, row = 84 } } (Application [Node { end = { column = 23, row = 84 }, start = { column = 5, row = 84 } } (FunctionOrValue ["ParserFast"] "keyword"),Node { end = { column = 28, row = 84 }, start = { column = 24, row = 84 } } (Literal "in"),Node { end = { column = 31, row = 84 }, start = { column = 29, row = 84 } } UnitExpr]), name = Node { end = { column = 8, row = 83 }, start = { column = 1, row = 83 } } "inToken" }, documentation = Nothing, signature = Just (Node { end = { column = 31, row = 82 }, start = { column = 1, row = 82 } } { name = Node { end = { column = 8, row = 82 }, start = { column = 1, row = 82 } } "inToken", typeAnnotation = Node { end = { column = 31, row = 82 }, start = { column = 11, row = 82 } } (Typed (Node { end = { column = 28, row = 82 }, start = { column = 11, row = 82 } } (["ParserFast"],"Parser")) [Node { end = { column = 31, row = 82 }, start = { column = 29, row = 82 } } Unit]) }) }),Node { end = { column = 10, row = 106 }, start = { column = 1, row = 87 } } (FunctionDeclaration { declaration = Node { end = { column = 10, row = 106 }, start = { column = 1, row = 88 } } { arguments = [Node { end = { column = 30, row = 88 }, start = { column = 21, row = 88 } } (VarPattern "charToRes")], expression = Node { end = { column = 10, row = 106 }, start = { column = 5, row = 89 } } (Application [Node { end = { column = 22, row = 89 }, start = { column = 5, row = 89 } } (FunctionOrValue ["ParserFast"] "oneOf7"),Node { end = { column = 49, row = 90 }, start = { column = 9, row = 90 } } (ParenthesizedExpression (Node { end = { column = 48, row = 90 }, start = { column = 10, row = 90 } } (Application [Node { end = { column = 27, row = 90 }, start = { column = 10, row = 90 } } (FunctionOrValue ["ParserFast"] "symbol"),Node { end = { column = 31, row = 90 }, start = { column = 28, row = 90 } } (Literal "'"),Node { end = { column = 48, row = 90 }, start = { column = 32, row = 90 } } (ParenthesizedExpression (Node { end = { column = 47, row = 90 }, start = { column = 33, row = 90 } } (Application [Node { end = { column = 42, row = 90 }, start = { column = 33, row = 90 } } (FunctionOrValue [] "charToRes"),Node { end = { column = 47, row = 90 }, start = { column = 43, row = 90 } } (CharLiteral '\'')])))]))),Node { end = { column = 49, row = 91 }, start = { column = 9, row = 91 } } (ParenthesizedExpression (Node { end = { column = 48, row = 91 }, start = { column = 10, row = 91 } } (Application [Node { end = { column = 27, row = 91 }, start = { column = 10, row = 91 } } (FunctionOrValue ["ParserFast"] "symbol"),Node { end = { column = 32, row = 91 }, start = { column = 28, row = 91 } } (Literal "\""),Node { end = { column = 48, row = 91 }, start = { column = 33, row = 91 } } (ParenthesizedExpression (Node { end = { column = 47, row = 91 }, start = { column = 34, row = 91 } } (Application [Node { end = { column = 43, row = 91 }, start = { column = 34, row = 91 } } (FunctionOrValue [] "charToRes"),Node { end = { column = 47, row = 91 }, start = { column = 44, row = 91 } } (CharLiteral '"')])))]))),Node { end = { column = 49, row = 92 }, start = { column = 9, row = 92 } } (ParenthesizedExpression (Node { end = { column = 48, row = 92 }, start = { column = 10, row = 92 } } (Application [Node { end = { column = 27, row = 92 }, start = { column = 10, row = 92 } } (FunctionOrValue ["ParserFast"] "symbol"),Node { end = { column = 31, row = 92 }, start = { column = 28, row = 92 } } (Literal "n"),Node { end = { column = 48, row = 92 }, start = { column = 32, row = 92 } } (ParenthesizedExpression (Node { end = { column = 47, row = 92 }, start = { column = 33, row = 92 } } (Application [Node { end = { column = 42, row = 92 }, start = { column = 33, row = 92 } } (FunctionOrValue [] "charToRes"),Node { end = { column = 47, row = 92 }, start = { column = 43, row = 92 } } (CharLiteral '\n')])))]))),Node { end = { column = 49, row = 93 }, start = { column = 9, row = 93 } } (ParenthesizedExpression (Node { end = { column = 48, row = 93 }, start = { column = 10, row = 93 } } (Application [Node { end = { column = 27, row = 93 }, start = { column = 10, row = 93 } } (FunctionOrValue ["ParserFast"] "symbol"),Node { end = { column = 31, row = 93 }, start = { column = 28, row = 93 } } (Literal "t"),Node { end = { column = 48, row = 93 }, start = { column = 32, row = 93 } } (ParenthesizedExpression (Node { end = { column = 47, row = 93 }, start = { column = 33, row = 93 } } (Application [Node { end = { column = 42, row = 93 }, start = { column = 33, row = 93 } } (FunctionOrValue [] "charToRes"),Node { end = { column = 47, row = 93 }, start = { column = 43, row = 93 } } (CharLiteral '\t')])))]))),Node { end = { column = 55, row = 95 }, start = { column = 9, row = 95 } } (ParenthesizedExpression (Node { end = { column = 54, row = 95 }, start = { column = 10, row = 95 } } (Application [Node { end = { column = 27, row = 95 }, start = { column = 10, row = 95 } } (FunctionOrValue ["ParserFast"] "symbol"),Node { end = { column = 31, row = 95 }, start = { column = 28, row = 95 } } (Literal "r"),Node { end = { column = 54, row = 95 }, start = { column = 32, row = 95 } } (ParenthesizedExpression (Node { end = { column = 53, row = 95 }, start = { column = 33, row = 95 } } (Application [Node { end = { column = 42, row = 95 }, start = { column = 33, row = 95 } } (FunctionOrValue [] "charToRes"),Node { end = { column = 53, row = 95 }, start = { column = 43, row = 95 } } (CharLiteral '\r')])))]))),Node { end = { column = 50, row = 96 }, start = { column = 9, row = 96 } } (ParenthesizedExpression (Node { end = { column = 49, row = 96 }, start = { column = 10, row = 96 } } (Application [Node { end = { column = 27, row = 96 }, start = { column = 10, row = 96 } } (FunctionOrValue ["ParserFast"] "symbol"),Node { end = { column = 32, row = 96 }, start = { column = 28, row = 96 } } (Literal "\\"),Node { end = { column = 49, row = 96 }, start = { column = 33, row = 96 } } (ParenthesizedExpression (Node { end = { column = 48, row = 96 }, start = { column = 34, row = 96 } } (Application [Node { end = { column = 43, row = 96 }, start = { column = 34, row = 96 } } (FunctionOrValue [] "charToRes"),Node { end = { column = 48, row = 96 }, start = { column = 44, row = 96 } } (CharLiteral '\\')])))]))),Node { end = { column = 10, row = 106 }, start = { column = 9, row = 97 } } (ParenthesizedExpression (Node { end = { column = 14, row = 105 }, start = { column = 10, row = 97 } } (Application [Node { end = { column = 37, row = 97 }, start = { column = 10, row = 97 } } (FunctionOrValue ["ParserFast"] "symbolFollowedBy"),Node { end = { column = 42, row = 97 }, start = { column = 38, row = 97 } } (Literal "u{"),Node { end = { column = 14, row = 105 }, start = { column = 13, row = 98 } } (ParenthesizedExpression (Node { end = { column = 51, row = 104 }, start = { column = 14, row = 98 } } (OperatorApplication "|>" Left (Node { end = { column = 32, row = 103 }, start = { column = 14, row = 98 } } (Application [Node { end = { column = 61, row = 98 }, start = { column = 14, row = 98 } } (FunctionOrValue ["ParserFast"] "ifFollowedByWhileMapWithoutLinebreak"),Node { end = { column = 18, row = 101 }, start = { column = 17, row = 99 } } (ParenthesizedExpression (Node { end = { column = 67, row = 100 }, start = { column = 18, row = 99 } } (LambdaExpression { args = [Node { end = { column = 22, row = 99 }, start = { column = 19, row = 99 } } (VarPattern "hex")], expression = Node { end = { column = 67, row = 100 }, start = { column = 21, row = 100 } } (Application [Node { end = { column = 30, row = 100 }, start = { column = 21, row = 100 } } (FunctionOrValue [] "charToRes"),Node { end = { column = 67, row = 100 }, start = { column = 31, row = 100 } } (ParenthesizedExpression (Node { end = { column = 66, row = 100 }, start = { column = 32, row = 100 } } (Application [Node { end = { column = 45, row = 100 }, start = { column = 32, row = 100 } } (FunctionOrValue ["Char"] "fromCode"),Node { end = { column = 66, row = 100 }, start = { column = 46, row = 100 } } (ParenthesizedExpression (Node { end = { column = 65, row = 100 }, start = { column = 47, row = 100 } } (Application [Node { end = { column = 61, row = 100 }, start = { column = 47, row = 100 } } (FunctionOrValue [] "hexStringToInt"),Node { end = { column = 65, row = 100 }, start = { column = 62, row = 100 } } (FunctionOrValue [] "hex")])))])))]) }))),Node { end = { column = 32, row = 102 }, start = { column = 17, row = 102 } } (FunctionOrValue ["Char"] "isHexDigit"),Node { end = { column = 32, row = 103 }, start = { column = 17, row = 103 } } (FunctionOrValue ["Char"] "isHexDigit")])) (Node { end = { column = 51, row = 104 }, start = { column = 20, row = 104 } } (Application [Node { end = { column = 47, row = 104 }, start = { column = 20, row = 104 } } (FunctionOrValue ["ParserFast"] "followedBySymbol"),Node { end = { column = 51, row = 104 }, start = { column = 48, row = 104 } } (Literal "}")])))))])))]), name = Node { end = { column = 20, row = 88 }, start = { column = 1, row = 88 } } "escapedCharValueMap" }, documentation = Nothing, signature = Just (Node { end = { column = 61, row = 87 }, start = { column = 1, row = 87 } } { name = Node { end = { column = 20, row = 87 }, start = { column = 1, row = 87 } } "escapedCharValueMap", typeAnnotation = Node { end = { column = 61, row = 87 }, start = { column = 23, row = 87 } } (FunctionTypeAnnotation (Node { end = { column = 36, row = 87 }, start = { column = 23, row = 87 } } (FunctionTypeAnnotation (Node { end = { column = 28, row = 87 }, start = { column = 24, row = 87 } } (Typed (Node { end = { column = 28, row = 87 }, start = { column = 24, row = 87 } } ([],"Char")) [])) (Node { end = { column = 35, row = 87 }, start = { column = 32, row = 87 } } (GenericType "res")))) (Node { end = { column = 61, row = 87 }, start = { column = 40, row = 87 } } (Typed (Node { end = { column = 57, row = 87 }, start = { column = 40, row = 87 } } (["ParserFast"],"Parser")) [Node { end = { column = 61, row = 87 }, start = { column = 58, row = 87 } } (GenericType "res")]))) }) }),Node { end = { column = 19, row = 119 }, start = { column = 1, row = 109 } } (FunctionDeclaration { declaration = Node { end = { column = 19, row = 119 }, start = { column = 1, row = 110 } } { arguments = [Node { end = { column = 22, row = 110 }, start = { column = 16, row = 110 } } (VarPattern "string")], expression = Node { end = { column = 19, row = 119 }, start = { column = 5, row = 111 } } (OperatorApplication "|>" Left (Node { end = { column = 15, row = 118 }, start = { column = 5, row = 111 } } (Application [Node { end = { column = 17, row = 111 }, start = { column = 5, row = 111 } } (FunctionOrValue ["String"] "foldr"),Node { end = { column = 10, row = 116 }, start = { column = 9, row = 112 } } (ParenthesizedExpression (Node { end = { column = 14, row = 115 }, start = { column = 10, row = 112 } } (LambdaExpression { args = [Node { end = { column = 12, row = 112 }, start = { column = 11, row = 112 } } (VarPattern "c"),Node { end = { column = 18, row = 112 }, start = { column = 13, row = 112 } } (VarPattern "soFar")], expression = Node { end = { column = 14, row = 115 }, start = { column = 13, row = 113 } } (RecordExpr [Node { end = { column = 44, row = 113 }, start = { column = 15, row = 113 } } [Node { end = { column = 23, row = 113 }, start = { column = 15, row = 113 } } "exponent",Node { end = { column = 44, row = 113 }, start = { column = 26, row = 113 } } (OperatorApplication "+" Left (Node { end = { column = 40, row = 113 }, start = { column = 26, row = 113 } } (RecordAccess (Node { end = { column = 31, row = 113 }, start = { column = 26, row = 113 } } (FunctionOrValue [] "soFar")) (Node { end = { column = 40, row = 113 }, start = { column = 32, row = 113 } } "exponent"))) (Node { end = { column = 44, row = 113 }, start = { column = 43, row = 113 } } (Integer 1)))],Node { end = { column = 13, row = 115 }, start = { column = 15, row = 114 } } [Node { end = { column = 21, row = 114 }, start = { column = 15, row = 114 } } "result",Node { end = { column = 72, row = 114 }, start = { column = 24, row = 114 } } (OperatorApplication "+" Left (Node { end = { column = 36, row = 114 }, start = { column = 24, row = 114 } } (RecordAccess (Node { end = { column = 29, row = 114 }, start = { column = 24, row = 114 } } (FunctionOrValue [] "soFar")) (Node { end = { column = 36, row = 114 }, start = { column = 30, row = 114 } } "result"))) (Node { end = { column = 72, row = 114 }, start = { column = 39, row = 114 } } (OperatorApplication "*" Left (Node { end = { column = 58, row = 114 }, start = { column = 39, row = 114 } } (OperatorApplication "^" Right (Node { end = { column = 41, row = 114 }, start = { column = 39, row = 114 } } (Integer 16)) (Node { end = { column = 58, row = 114 }, start = { column = 44, row = 114 } } (RecordAccess (Node { end = { column = 49, row = 114 }, start = { column = 44, row = 114 } } (FunctionOrValue [] "soFar")) (Node { end = { column = 58, row = 114 }, start = { column = 50, row = 114 } } "exponent"))))) (Node { end = { column = 72, row = 114 }, start = { column = 61, row = 114 } } (Application [Node { end = { column = 70, row = 114 }, start = { column = 61, row = 114 } } (FunctionOrValue [] "charToHex"),Node { end = { column = 72, row = 114 }, start = { column = 71, row = 114 } } (FunctionOrValue [] "c")])))))]]) }))),Node { end = { column = 37, row = 117 }, start = { column = 9, row = 117 } } (RecordExpr [Node { end = { column = 23, row = 117 }, start = { column = 11, row = 117 } } [Node { end = { column = 19, row = 117 }, start = { column = 11, row = 117 } } "exponent",Node { end = { column = 23, row = 117 }, start = { column = 22, row = 117 } } (Integer 0)],Node { end = { column = 36, row = 117 }, start = { column = 25, row = 117 } } [Node { end = { column = 31, row = 117 }, start = { column = 25, row = 117 } } "result",Node { end = { column = 35, row = 117 }, start = { column = 34, row = 117 } } (Integer 0)]]),Node { end = { column = 15, row = 118 }, start = { column = 9, row = 118 } } (FunctionOrValue [] "string")])) (Node { end = { column = 19, row = 119 }, start = { column = 12, row = 119 } } (RecordAccessFunction ".result"))), name = Node { end = { column = 15, row = 110 }, start = { column = 1, row = 110 } } "hexStringToInt" }, documentation = Nothing, signature = Just (Node { end = { column = 31, row = 109 }, start = { column = 1, row = 109 } } { name = Node { end = { column = 15, row = 109 }, start = { column = 1, row = 109 } } "hexStringToInt", typeAnnotation = Node { end = { column = 31, row = 109 }, start = { column = 18, row = 109 } } (FunctionTypeAnnotation (Node { end = { column = 24, row = 109 }, start = { column = 18, row = 109 } } (Typed (Node { end = { column = 24, row = 109 }, start = { column = 18, row = 109 } } ([],"String")) [])) (Node { end = { column = 31, row = 109 }, start = { column = 28, row = 109 } } (Typed (Node { end = { column = 31, row = 109 }, start = { column = 28, row = 109 } } ([],"Int")) []))) }) }),Node { end = { column = 15, row = 190 }, start = { column = 1, row = 122 } } (FunctionDeclaration { declaration = Node { end = { column = 15, row = 190 }, start = { column = 1, row = 123 } } { arguments = [Node { end = { column = 12, row = 123 }, start = { column = 11, row = 123 } } (VarPattern "c")], expression = Node { end = { column = 15, row = 190 }, start = { column = 5, row = 124 } } (CaseExpression { cases = [[Node { end = { column = 12, row = 125 }, start = { column = 9, row = 125 } } (CharPattern '0'),Node { end = { column = 14, row = 126 }, start = { column = 13, row = 126 } } (Integer 0)],[Node { end = { column = 12, row = 128 }, start = { column = 9, row = 128 } } (CharPattern '1'),Node { end = { column = 14, row = 129 }, start = { column = 13, row = 129 } } (Integer 1)],[Node { end = { column = 12, row = 131 }, start = { column = 9, row = 131 } } (CharPattern '2'),Node { end = { column = 14, row = 132 }, start = { column = 13, row = 132 } } (Integer 2)],[Node { end = { column = 12, row = 134 }, start = { column = 9, row = 134 } } (CharPattern '3'),Node { end = { column = 14, row = 135 }, start = { column = 13, row = 135 } } (Integer 3)],[Node { end = { column = 12, row = 137 }, start = { column = 9, row = 137 } } (CharPattern '4'),Node { end = { column = 14, row = 138 }, start = { column = 13, row = 138 } } (Integer 4)],[Node { end = { column = 12, row = 140 }, start = { column = 9, row = 140 } } (CharPattern '5'),Node { end = { column = 14, row = 141 }, start = { column = 13, row = 141 } } (Integer 5)],[Node { end = { column = 12, row = 143 }, start = { column = 9, row = 143 } } (CharPattern '6'),Node { end = { column = 14, row = 144 }, start = { column = 13, row = 144 } } (Integer 6)],[Node { end = { column = 12, row = 146 }, start = { column = 9, row = 146 } } (CharPattern '7'),Node { end = { column = 14, row = 147 }, start = { column = 13, row = 147 } } (Integer 7)],[Node { end = { column = 12, row = 149 }, start = { column = 9, row = 149 } } (CharPattern '8'),Node { end = { column = 14, row = 150 }, start = { column = 13, row = 150 } } (Integer 8)],[Node { end = { column = 12, row = 152 }, start = { column = 9, row = 152 } } (CharPattern '9'),Node { end = { column = 14, row = 153 }, start = { column = 13, row = 153 } } (Integer 9)],[Node { end = { column = 12, row = 155 }, start = { column = 9, row = 155 } } (CharPattern 'a'),Node { end = { column = 15, row = 156 }, start = { column = 13, row = 156 } } (Integer 10)],[Node { end = { column = 12, row = 158 }, start = { column = 9, row = 158 } } (CharPattern 'b'),Node { end = { column = 15, row = 159 }, start = { column = 13, row = 159 } } (Integer 11)],[Node { end = { column = 12, row = 161 }, start = { column = 9, row = 161 } } (CharPattern 'c'),Node { end = { column = 15, row = 162 }, start = { column = 13, row = 162 } } (Integer 12)],[Node { end = { column = 12, row = 164 }, start = { column = 9, row = 164 } } (CharPattern 'd'),Node { end = { column = 15, row = 165 }, start = { column = 13, row = 165 } } (Integer 13)],[Node { end = { column = 12, row = 167 }, start = { column = 9, row = 167 } } (CharPattern 'e'),Node { end = { column = 15, row = 168 }, start = { column = 13, row = 168 } } (Integer 14)],[Node { end = { column = 12, row = 170 }, start = { column = 9, row = 170 } } (CharPattern 'f'),Node { end = { column = 15, row = 171 }, start = { column = 13, row = 171 } } (Integer 15)],[Node { end = { column = 12, row = 173 }, start = { column = 9, row = 173 } } (CharPattern 'A'),Node { end = { column = 15, row = 174 }, start = { column = 13, row = 174 } } (Integer 10)],[Node { end = { column = 12, row = 176 }, start = { column = 9, row = 176 } } (CharPattern 'B'),Node { end = { column = 15, row = 177 }, start = { column = 13, row = 177 } } (Integer 11)],[Node { end = { column = 12, row = 179 }, start = { column = 9, row = 179 } } (CharPattern 'C'),Node { end = { column = 15, row = 180 }, start = { column = 13, row = 180 } } (Integer 12)],[Node { end = { column = 12, row = 182 }, start = { column = 9, row = 182 } } (CharPattern 'D'),Node { end = { column = 15, row = 183 }, start = { column = 13, row = 183 } } (Integer 13)],[Node { end = { column = 12, row = 185 }, start = { column = 9, row = 185 } } (CharPattern 'E'),Node { end = { column = 15, row = 186 }, start = { column = 13, row = 186 } } (Integer 14)],[Node { end = { column = 10, row = 189 }, start = { column = 9, row = 189 } } AllPattern,Node { end = { column = 15, row = 190 }, start = { column = 13, row = 190 } } (Integer 15)]], expression = Node { end = { column = 11, row = 124 }, start = { column = 10, row = 124 } } (FunctionOrValue [] "c") }), name = Node { end = { column = 10, row = 123 }, start = { column = 1, row = 123 } } "charToHex" }, documentation = Nothing, signature = Just (Node { end = { column = 24, row = 122 }, start = { column = 1, row = 122 } } { name = Node { end = { column = 10, row = 122 }, start = { column = 1, row = 122 } } "charToHex", typeAnnotation = Node { end = { column = 24, row = 122 }, start = { column = 13, row = 122 } } (FunctionTypeAnnotation (Node { end = { column = 17, row = 122 }, start = { column = 13, row = 122 } } (Typed (Node { end = { column = 17, row = 122 }, start = { column = 13, row = 122 } } ([],"Char")) [])) (Node { end = { column = 24, row = 122 }, start = { column = 21, row = 122 } } (Typed (Node { end = { column = 24, row = 122 }, start = { column = 21, row = 122 } } ([],"Int")) []))) }) }),Node { end = { column = 10, row = 214 }, start = { column = 1, row = 193 } } (FunctionDeclaration { declaration = Node { end = { column = 10, row = 214 }, start = { column = 1, row = 194 } } { arguments = [Node { end = { column = 47, row = 194 }, start = { column = 30, row = 194 } } (VarPattern "rangeAndCharToRes")], expression = Node { end = { column = 10, row = 214 }, start = { column = 5, row = 195 } } (Application [Node { end = { column = 32, row = 195 }, start = { column = 5, row = 195 } } (FunctionOrValue ["ParserFast"] "symbolFollowedBy"),Node { end = { column = 36, row = 195 }, start = { column = 33, row = 195 } } (Literal "'"),Node { end = { column = 10, row = 214 }, start = { column = 9, row = 196 } } (ParenthesizedExpression (Node { end = { column = 47, row = 213 }, start = { column = 10, row = 196 } } (OperatorApplication "|>" Left (Node { end = { column = 31, row = 212 }, start = { column = 10, row = 196 } } (Application [Node { end = { column = 63, row = 196 }, start = { column = 10, row = 196 } } (FunctionOrValue ["ParserFast"] "oneOf2MapWithStartRowColumnAndEndRowColumn"),Node { end = { column = 14, row = 203 }, start = { column = 13, row = 197 } } (ParenthesizedExpression (Node { end = { column = 25, row = 202 }, start = { column = 14, row = 197 } } (LambdaExpression { args = [Node { end = { column = 23, row = 197 }, start = { column = 15, row = 197 } } (VarPattern "startRow"),Node { end = { column = 35, row = 197 }, start = { column = 24, row = 197 } } (VarPattern "startColumn"),Node { end = { column = 40, row = 197 }, start = { column = 36, row = 197 } } (VarPattern "char"),Node { end = { column = 47, row = 197 }, start = { column = 41, row = 197 } } (VarPattern "endRow"),Node { end = { column = 57, row = 197 }, start = { column = 48, row = 197 } } (VarPattern "endColumn")], expression = Node { end = { column = 25, row = 202 }, start = { column = 17, row = 198 } } (Application [Node { end = { column = 34, row = 198 }, start = { column = 17, row = 198 } } (FunctionOrValue [] "rangeAndCharToRes"),Node { end = { column = 22, row = 201 }, start = { column = 21, row = 199 } } (RecordExpr [Node { end = { column = 75, row = 199 }, start = { column = 23, row = 199 } } [Node { end = { column = 28, row = 199 }, start = { column = 23, row = 199 } } "start",Node { end = { column = 75, row = 199 }, start = { column = 31, row = 199 } } (RecordExpr [Node { end = { column = 47, row = 199 }, start = { column = 33, row = 199 } } [Node { end = { column = 36, row = 199 }, start = { column = 33, row = 199 } } "row",Node { end = { column = 47, row = 199 }, start = { column = 39, row = 199 } } (FunctionOrValue [] "startRow")],Node { end = { column = 74, row = 199 }, start = { column = 49, row = 199 } } [Node { end = { column = 55, row = 199 }, start = { column = 49, row = 199 } } "column",Node { end = { column = 73, row = 199 }, start = { column = 58, row = 199 } } (OperatorApplication "-" Left (Node { end = { column = 69, row = 199 }, start = { column = 58, row = 199 } } (FunctionOrValue [] "startColumn")) (Node { end = { column = 73, row = 199 }, start = { column = 72, row = 199 } } (Integer 1)))]])],Node { end = { column = 21, row = 201 }, start = { column = 23, row = 200 } } [Node { end = { column = 26, row = 200 }, start = { column = 23, row = 200 } } "end",Node { end = { column = 69, row = 200 }, start = { column = 29, row = 200 } } (RecordExpr [Node { end = { column = 43, row = 200 }, start = { column = 31, row = 200 } } [Node { end = { column = 34, row = 200 }, start = { column = 31, row = 200 } } "row",Node { end = { column = 43, row = 200 }, start = { column = 37, row = 200 } } (FunctionOrValue [] "endRow")],Node { end = { column = 68, row = 200 }, start = { column = 45, row = 200 } } [Node { end = { column = 51, row = 200 }, start = { column = 45, row = 200 } } "column",Node { end = { column = 67, row = 200 }, start = { column = 54, row = 200 } } (OperatorApplication "+" Left (Node { end = { column = 63, row = 200 }, start = { column = 54, row = 200 } } (FunctionOrValue [] "endColumn")) (Node { end = { column = 67, row = 200 }, start = { column = 66, row = 200 } } (Integer 1)))]])]]),Node { end = { column = 25, row = 202 }, start = { column = 21, row = 202 } } (FunctionOrValue [] "char")]) }))),Node { end = { column = 78, row = 204 }, start = { column = 13, row = 204 } } (ParenthesizedExpression (Node { end = { column = 77, row = 204 }, start = { column = 14, row = 204 } } (Application [Node { end = { column = 41, row = 204 }, start = { column = 14, row = 204 } } (FunctionOrValue ["ParserFast"] "symbolFollowedBy"),Node { end = { column = 46, row = 204 }, start = { column = 42, row = 204 } } (Literal "\\"),Node { end = { column = 77, row = 204 }, start = { column = 47, row = 204 } } (ParenthesizedExpression (Node { end = { column = 76, row = 204 }, start = { column = 48, row = 204 } } (Application [Node { end = { column = 67, row = 204 }, start = { column = 48, row = 204 } } (FunctionOrValue [] "escapedCharValueMap"),Node { end = { column = 76, row = 204 }, start = { column = 68, row = 204 } } (FunctionOrValue [] "identity")])))]))),Node { end = { column = 14, row = 211 }, start = { column = 13, row = 205 } } (ParenthesizedExpression (Node { end = { column = 25, row = 210 }, start = { column = 14, row = 205 } } (LambdaExpression { args = [Node { end = { column = 23, row = 205 }, start = { column = 15, row = 205 } } (VarPattern "startRow"),Node { end = { column = 35, row = 205 }, start = { column = 24, row = 205 } } (VarPattern "startColumn"),Node { end = { column = 40, row = 205 }, start = { column = 36, row = 205 } } (VarPattern "char"),Node { end = { column = 47, row = 205 }, start = { column = 41, row = 205 } } (VarPattern "endRow"),Node { end = { column = 57, row = 205 }, start = { column = 48, row = 205 } } (VarPattern "endColumn")], expression = Node { end = { column = 25, row = 210 }, start = { column = 17, row = 206 } } (Application [Node { end = { column = 34, row = 206 }, start = { column = 17, row = 206 } } (FunctionOrValue [] "rangeAndCharToRes"),Node { end = { column = 22, row = 209 }, start = { column = 21, row = 207 } } (RecordExpr [Node { end = { column = 75, row = 207 }, start = { column = 23, row = 207 } } [Node { end = { column = 28, row = 207 }, start = { column = 23, row = 207 } } "start",Node { end = { column = 75, row = 207 }, start = { column = 31, row = 207 } } (RecordExpr [Node { end = { column = 47, row = 207 }, start = { column = 33, row = 207 } } [Node { end = { column = 36, row = 207 }, start = { column = 33, row = 207 } } "row",Node { end = { column = 47, row = 207 }, start = { column = 39, row = 207 } } (FunctionOrValue [] "startRow")],Node { end = { column = 74, row = 207 }, start = { column = 49, row = 207 } } [Node { end = { column = 55, row = 207 }, start = { column = 49, row = 207 } } "column",Node { end = { column = 73, row = 207 }, start = { column = 58, row = 207 } } (OperatorApplication "-" Left (Node { end = { column = 69, row = 207 }, start = { column = 58, row = 207 } } (FunctionOrValue [] "startColumn")) (Node { end = { column = 73, row = 207 }, start = { column = 72, row = 207 } } (Integer 1)))]])],Node { end = { column = 21, row = 209 }, start = { column = 23, row = 208 } } [Node { end = { column = 26, row = 208 }, start = { column = 23, row = 208 } } "end",Node { end = { column = 69, row = 208 }, start = { column = 29, row = 208 } } (RecordExpr [Node { end = { column = 43, row = 208 }, start = { column = 31, row = 208 } } [Node { end = { column = 34, row = 208 }, start = { column = 31, row = 208 } } "row",Node { end = { column = 43, row = 208 }, start = { column = 37, row = 208 } } (FunctionOrValue [] "endRow")],Node { end = { column = 68, row = 208 }, start = { column = 45, row = 208 } } [Node { end = { column = 51, row = 208 }, start = { column = 45, row = 208 } } "column",Node { end = { column = 67, row = 208 }, start = { column = 54, row = 208 } } (OperatorApplication "+" Left (Node { end = { column = 63, row = 208 }, start = { column = 54, row = 208 } } (FunctionOrValue [] "endColumn")) (Node { end = { column = 67, row = 208 }, start = { column = 66, row = 208 } } (Integer 1)))]])]]),Node { end = { column = 25, row = 210 }, start = { column = 21, row = 210 } } (FunctionOrValue [] "char")]) }))),Node { end = { column = 31, row = 212 }, start = { column = 13, row = 212 } } (FunctionOrValue ["ParserFast"] "anyChar")])) (Node { end = { column = 47, row = 213 }, start = { column = 16, row = 213 } } (Application [Node { end = { column = 43, row = 213 }, start = { column = 16, row = 213 } } (FunctionOrValue ["ParserFast"] "followedBySymbol"),Node { end = { column = 47, row = 213 }, start = { column = 44, row = 213 } } (Literal "'")])))))]), name = Node { end = { column = 29, row = 194 }, start = { column = 1, row = 194 } } "characterLiteralMapWithRange" }, documentation = Nothing, signature = Just (Node { end = { column = 79, row = 193 }, start = { column = 1, row = 193 } } { name = Node { end = { column = 29, row = 193 }, start = { column = 1, row = 193 } } "characterLiteralMapWithRange", typeAnnotation = Node { end = { column = 79, row = 193 }, start = { column = 32, row = 193 } } (FunctionTypeAnnotation (Node { end = { column = 54, row = 193 }, start = { column = 32, row = 193 } } (FunctionTypeAnnotation (Node { end = { column = 38, row = 193 }, start = { column = 33, row = 193 } } (Typed (Node { end = { column = 38, row = 193 }, start = { column = 33, row = 193 } } ([],"Range")) [])) (Node { end = { column = 53, row = 193 }, start = { column = 42, row = 193 } } (FunctionTypeAnnotation (Node { end = { column = 46, row = 193 }, start = { column = 42, row = 193 } } (Typed (Node { end = { column = 46, row = 193 }, start = { column = 42, row = 193 } } ([],"Char")) [])) (Node { end = { column = 53, row = 193 }, start = { column = 50, row = 193 } } (GenericType "res")))))) (Node { end = { column = 79, row = 193 }, start = { column = 58, row = 193 } } (Typed (Node { end = { column = 75, row = 193 }, start = { column = 58, row = 193 } } (["ParserFast"],"Parser")) [Node { end = { column = 79, row = 193 }, start = { column = 76, row = 193 } } (GenericType "res")]))) }) }),Node { end = { column = 10, row = 239 }, start = { column = 1, row = 217 } } (FunctionDeclaration { declaration = Node { end = { column = 10, row = 239 }, start = { column = 1, row = 218 } } { arguments = [Node { end = { column = 66, row = 218 }, start = { column = 47, row = 218 } } (VarPattern "rangeAndStringToRes")], expression = Node { end = { column = 10, row = 239 }, start = { column = 5, row = 219 } } (Application [Node { end = { column = 32, row = 219 }, start = { column = 5, row = 219 } } (FunctionOrValue ["ParserFast"] "symbolFollowedBy"),Node { end = { column = 37, row = 219 }, start = { column = 33, row = 219 } } (Literal "\""),Node { end = { column = 10, row = 239 }, start = { column = 9, row = 220 } } (ParenthesizedExpression (Node { end = { column = 54, row = 238 }, start = { column = 10, row = 220 } } (Application [Node { end = { column = 63, row = 220 }, start = { column = 10, row = 220 } } (FunctionOrValue ["ParserFast"] "oneOf2MapWithStartRowColumnAndEndRowColumn"),Node { end = { column = 14, row = 227 }, start = { column = 13, row = 221 } } (ParenthesizedExpression (Node { end = { column = 27, row = 226 }, start = { column = 14, row = 221 } } (LambdaExpression { args = [Node { end = { column = 23, row = 221 }, start = { column = 15, row = 221 } } (VarPattern "startRow"),Node { end = { column = 35, row = 221 }, start = { column = 24, row = 221 } } (VarPattern "startColumn"),Node { end = { column = 42, row = 221 }, start = { column = 36, row = 221 } } (VarPattern "string"),Node { end = { column = 49, row = 221 }, start = { column = 43, row = 221 } } (VarPattern "endRow"),Node { end = { column = 59, row = 221 }, start = { column = 50, row = 221 } } (VarPattern "endColumn")], expression = Node { end = { column = 27, row = 226 }, start = { column = 17, row = 222 } } (Application [Node { end = { column = 36, row = 222 }, start = { column = 17, row = 222 } } (FunctionOrValue [] "rangeAndStringToRes"),Node { end = { column = 22, row = 225 }, start = { column = 21, row = 223 } } (RecordExpr [Node { end = { column = 75, row = 223 }, start = { column = 23, row = 223 } } [Node { end = { column = 28, row = 223 }, start = { column = 23, row = 223 } } "start",Node { end = { column = 75, row = 223 }, start = { column = 31, row = 223 } } (RecordExpr [Node { end = { column = 47, row = 223 }, start = { column = 33, row = 223 } } [Node { end = { column = 36, row = 223 }, start = { column = 33, row = 223 } } "row",Node { end = { column = 47, row = 223 }, start = { column = 39, row = 223 } } (FunctionOrValue [] "startRow")],Node { end = { column = 74, row = 223 }, start = { column = 49, row = 223 } } [Node { end = { column = 55, row = 223 }, start = { column = 49, row = 223 } } "column",Node { end = { column = 73, row = 223 }, start = { column = 58, row = 223 } } (OperatorApplication "-" Left (Node { end = { column = 69, row = 223 }, start = { column = 58, row = 223 } } (FunctionOrValue [] "startColumn")) (Node { end = { column = 73, row = 223 }, start = { column = 72, row = 223 } } (Integer 1)))]])],Node { end = { column = 21, row = 225 }, start = { column = 23, row = 224 } } [Node { end = { column = 26, row = 224 }, start = { column = 23, row = 224 } } "end",Node { end = { column = 65, row = 224 }, start = { column = 29, row = 224 } } (RecordExpr [Node { end = { column = 43, row = 224 }, start = { column = 31, row = 224 } } [Node { end = { column = 34, row = 224 }, start = { column = 31, row = 224 } } "row",Node { end = { column = 43, row = 224 }, start = { column = 37, row = 224 } } (FunctionOrValue [] "endRow")],Node { end = { column = 64, row = 224 }, start = { column = 45, row = 224 } } [Node { end = { column = 51, row = 224 }, start = { column = 45, row = 224 } } "column",Node { end = { column = 63, row = 224 }, start = { column = 54, row = 224 } } (FunctionOrValue [] "endColumn")]])]]),Node { end = { column = 27, row = 226 }, start = { column = 21, row = 226 } } (FunctionOrValue [] "string")]) }))),Node { end = { column = 14, row = 230 }, start = { column = 13, row = 228 } } (ParenthesizedExpression (Node { end = { column = 64, row = 229 }, start = { column = 14, row = 228 } } (Application [Node { end = { column = 41, row = 228 }, start = { column = 14, row = 228 } } (FunctionOrValue ["ParserFast"] "symbolFollowedBy"),Node { end = { column = 48, row = 228 }, start = { column = 42, row = 228 } } (Literal "\"\""),Node { end = { column = 64, row = 229 }, start = { column = 17, row = 229 } } (FunctionOrValue [] "tripleQuotedStringLiteralOfterTripleDoubleQuote")]))),Node { end = { column = 14, row = 237 }, start = { column = 13, row = 231 } } (ParenthesizedExpression (Node { end = { column = 27, row = 236 }, start = { column = 14, row = 231 } } (LambdaExpression { args = [Node { end = { column = 23, row = 231 }, start = { column = 15, row = 231 } } (VarPattern "startRow"),Node { end = { column = 35, row = 231 }, start = { column = 24, row = 231 } } (VarPattern "startColumn"),Node { end = { column = 42, row = 231 }, start = { column = 36, row = 231 } } (VarPattern "string"),Node { end = { column = 49, row = 231 }, start = { column = 43, row = 231 } } (VarPattern "endRow"),Node { end = { column = 59, row = 231 }, start = { column = 50, row = 231 } } (VarPattern "endColumn")], expression = Node { end = { column = 27, row = 236 }, start = { column = 17, row = 232 } } (Application [Node { end = { column = 36, row = 232 }, start = { column = 17, row = 232 } } (FunctionOrValue [] "rangeAndStringToRes"),Node { end = { column = 22, row = 235 }, start = { column = 21, row = 233 } } (RecordExpr [Node { end = { column = 75, row = 233 }, start = { column = 23, row = 233 } } [Node { end = { column = 28, row = 233 }, start = { column = 23, row = 233 } } "start",Node { end = { column = 75, row = 233 }, start = { column = 31, row = 233 } } (RecordExpr [Node { end = { column = 47, row = 233 }, start = { column = 33, row = 233 } } [Node { end = { column = 36, row = 233 }, start = { column = 33, row = 233 } } "row",Node { end = { column = 47, row = 233 }, start = { column = 39, row = 233 } } (FunctionOrValue [] "startRow")],Node { end = { column = 74, row = 233 }, start = { column = 49, row = 233 } } [Node { end = { column = 55, row = 233 }, start = { column = 49, row = 233 } } "column",Node { end = { column = 73, row = 233 }, start = { column = 58, row = 233 } } (OperatorApplication "-" Left (Node { end = { column = 69, row = 233 }, start = { column = 58, row = 233 } } (FunctionOrValue [] "startColumn")) (Node { end = { column = 73, row = 233 }, start = { column = 72, row = 233 } } (Integer 1)))]])],Node { end = { column = 21, row = 235 }, start = { column = 23, row = 234 } } [Node { end = { column = 26, row = 234 }, start = { column = 23, row = 234 } } "end",Node { end = { column = 65, row = 234 }, start = { column = 29, row = 234 } } (RecordExpr [Node { end = { column = 43, row = 234 }, start = { column = 31, row = 234 } } [Node { end = { column = 34, row = 234 }, start = { column = 31, row = 234 } } "row",Node { end = { column = 43, row = 234 }, start = { column = 37, row = 234 } } (FunctionOrValue [] "endRow")],Node { end = { column = 64, row = 234 }, start = { column = 45, row = 234 } } [Node { end = { column = 51, row = 234 }, start = { column = 45, row = 234 } } "column",Node { end = { column = 63, row = 234 }, start = { column = 54, row = 234 } } (FunctionOrValue [] "endColumn")]])]]),Node { end = { column = 27, row = 236 }, start = { column = 21, row = 236 } } (FunctionOrValue [] "string")]) }))),Node { end = { column = 54, row = 238 }, start = { column = 13, row = 238 } } (FunctionOrValue [] "singleQuotedStringLiteralAfterDoubleQuote")])))]), name = Node { end = { column = 46, row = 218 }, start = { column = 1, row = 218 } } "singleOrTripleQuotedStringLiteralMapWithRange" }, documentation = Nothing, signature = Just (Node { end = { column = 98, row = 217 }, start = { column = 1, row = 217 } } { name = Node { end = { column = 46, row = 217 }, start = { column = 1, row = 217 } } "singleOrTripleQuotedStringLiteralMapWithRange", typeAnnotation = Node { end = { column = 98, row = 217 }, start = { column = 49, row = 217 } } (FunctionTypeAnnotation (Node { end = { column = 73, row = 217 }, start = { column = 49, row = 217 } } (FunctionTypeAnnotation (Node { end = { column = 55, row = 217 }, start = { column = 50, row = 217 } } (Typed (Node { end = { column = 55, row = 217 }, start = { column = 50, row = 217 } } ([],"Range")) [])) (Node { end = { column = 72, row = 217 }, start = { column = 59, row = 217 } } (FunctionTypeAnnotation (Node { end = { column = 65, row = 217 }, start = { column = 59, row = 217 } } (Typed (Node { end = { column = 65, row = 217 }, start = { column = 59, row = 217 } } ([],"String")) [])) (Node { end = { column = 72, row = 217 }, start = { column = 69, row = 217 } } (GenericType "res")))))) (Node { end = { column = 98, row = 217 }, start = { column = 77, row = 217 } } (Typed (Node { end = { column = 94, row = 217 }, start = { column = 77, row = 217 } } (["ParserFast"],"Parser")) [Node { end = { column = 98, row = 217 }, start = { column = 95, row = 217 } } (GenericType "res")]))) }) }),Node { end = { column = 17, row = 253 }, start = { column = 1, row = 242 } } (FunctionDeclaration { declaration = Node { end = { column = 17, row = 253 }, start = { column = 1, row = 243 } } { arguments = [], expression = Node { end = { column = 17, row = 253 }, start = { column = 5, row = 244 } } (Application [Node { end = { column = 25, row = 244 }, start = { column = 5, row = 244 } } (FunctionOrValue ["ParserFast"] "loopUntil"),Node { end = { column = 53, row = 244 }, start = { column = 26, row = 244 } } (ParenthesizedExpression (Node { end = { column = 52, row = 244 }, start = { column = 27, row = 244 } } (Application [Node { end = { column = 44, row = 244 }, start = { column = 27, row = 244 } } (FunctionOrValue ["ParserFast"] "symbol"),Node { end = { column = 49, row = 244 }, start = { column = 45, row = 244 } } (Literal "\""),Node { end = { column = 52, row = 244 }, start = { column = 50, row = 244 } } UnitExpr]))),Node { end = { column = 10, row = 248 }, start = { column = 9, row = 245 } } (ParenthesizedExpression (Node { end = { column = 77, row = 247 }, start = { column = 10, row = 245 } } (Application [Node { end = { column = 27, row = 245 }, start = { column = 10, row = 245 } } (FunctionOrValue ["ParserFast"] "oneOf2"),Node { end = { column = 85, row = 246 }, start = { column = 13, row = 246 } } (ParenthesizedExpression (Node { end = { column = 84, row = 246 }, start = { column = 14, row = 246 } } (Application [Node { end = { column = 41, row = 246 }, start = { column = 14, row = 246 } } (FunctionOrValue ["ParserFast"] "symbolFollowedBy"),Node { end = { column = 46, row = 246 }, start = { column = 42, row = 246 } } (Literal "\\"),Node { end = { column = 84, row = 246 }, start = { column = 47, row = 246 } } (ParenthesizedExpression (Node { end = { column = 83, row = 246 }, start = { column = 48, row = 246 } } (Application [Node { end = { column = 67, row = 246 }, start = { column = 48, row = 246 } } (FunctionOrValue [] "escapedCharValueMap"),Node { end = { column = 83, row = 246 }, start = { column = 68, row = 246 } } (FunctionOrValue ["String"] "fromChar")])))]))),Node { end = { column = 77, row = 247 }, start = { column = 13, row = 247 } } (ParenthesizedExpression (Node { end = { column = 76, row = 247 }, start = { column = 14, row = 247 } } (Application [Node { end = { column = 46, row = 247 }, start = { column = 14, row = 247 } } (FunctionOrValue ["ParserFast"] "whileWithoutLinebreak"),Node { end = { column = 76, row = 247 }, start = { column = 47, row = 247 } } (ParenthesizedExpression (Node { end = { column = 75, row = 247 }, start = { column = 48, row = 247 } } (LambdaExpression { args = [Node { end = { column = 50, row = 247 }, start = { column = 49, row = 247 } } (VarPattern "c")], expression = Node { end = { column = 75, row = 247 }, start = { column = 54, row = 247 } } (OperatorApplication "&&" Right (Node { end = { column = 62, row = 247 }, start = { column = 54, row = 247 } } (OperatorApplication "/=" Non (Node { end = { column = 55, row = 247 }, start = { column = 54, row = 247 } } (FunctionOrValue [] "c")) (Node { end = { column = 62, row = 247 }, start = { column = 59, row = 247 } } (CharLiteral '"')))) (Node { end = { column = 75, row = 247 }, start = { column = 66, row = 247 } } (OperatorApplication "/=" Non (Node { end = { column = 67, row = 247 }, start = { column = 66, row = 247 } } (FunctionOrValue [] "c")) (Node { end = { column = 75, row = 247 }, start = { column = 71, row = 247 } } (CharLiteral '\\'))))) })))])))]))),Node { end = { column = 11, row = 249 }, start = { column = 9, row = 249 } } (Literal ""),Node { end = { column = 10, row = 252 }, start = { column = 9, row = 250 } } (ParenthesizedExpression (Node { end = { column = 37, row = 251 }, start = { column = 10, row = 250 } } (LambdaExpression { args = [Node { end = { column = 20, row = 250 }, start = { column = 11, row = 250 } } (VarPattern "extension"),Node { end = { column = 26, row = 250 }, start = { column = 21, row = 250 } } (VarPattern "soFar")], expression = Node { end = { column = 37, row = 251 }, start = { column = 13, row = 251 } } (OperatorApplication "++" Right (Node { end = { column = 18, row = 251 }, start = { column = 13, row = 251 } } (FunctionOrValue [] "soFar")) (Node { end = { column = 37, row = 251 }, start = { column = 22, row = 251 } } (OperatorApplication "++" Right (Node { end = { column = 31, row = 251 }, start = { column = 22, row = 251 } } (FunctionOrValue [] "extension")) (Node { end = { column = 37, row = 251 }, start = { column = 35, row = 251 } } (Literal ""))))) }))),Node { end = { column = 17, row = 253 }, start = { column = 9, row = 253 } } (FunctionOrValue [] "identity")]), name = Node { end = { column = 42, row = 243 }, start = { column = 1, row = 243 } } "singleQuotedStringLiteralAfterDoubleQuote" }, documentation = Nothing, signature = Just (Node { end = { column = 69, row = 242 }, start = { column = 1, row = 242 } } { name = Node { end = { column = 42, row = 242 }, start = { column = 1, row = 242 } } "singleQuotedStringLiteralAfterDoubleQuote", typeAnnotation = Node { end = { column = 69, row = 242 }, start = { column = 45, row = 242 } } (Typed (Node { end = { column = 62, row = 242 }, start = { column = 45, row = 242 } } (["ParserFast"],"Parser")) [Node { end = { column = 69, row = 242 }, start = { column = 63, row = 242 } } (Typed (Node { end = { column = 69, row = 242 }, start = { column = 63, row = 242 } } ([],"String")) [])]) }) }),Node { end = { column = 17, row = 268 }, start = { column = 1, row = 256 } } (FunctionDeclaration { declaration = Node { end = { column = 17, row = 268 }, start = { column = 1, row = 257 } } { arguments = [], expression = Node { end = { column = 17, row = 268 }, start = { column = 5, row = 258 } } (Application [Node { end = { column = 25, row = 258 }, start = { column = 5, row = 258 } } (FunctionOrValue ["ParserFast"] "loopUntil"),Node { end = { column = 57, row = 258 }, start = { column = 26, row = 258 } } (ParenthesizedExpression (Node { end = { column = 56, row = 258 }, start = { column = 27, row = 258 } } (Application [Node { end = { column = 44, row = 258 }, start = { column = 27, row = 258 } } (FunctionOrValue ["ParserFast"] "symbol"),Node { end = { column = 53, row = 258 }, start = { column = 45, row = 258 } } (Literal "\"\"\""),Node { end = { column = 56, row = 258 }, start = { column = 54, row = 258 } } UnitExpr]))),Node { end = { column = 10, row = 263 }, start = { column = 9, row = 259 } } (ParenthesizedExpression (Node { end = { column = 61, row = 262 }, start = { column = 10, row = 259 } } (Application [Node { end = { column = 27, row = 259 }, start = { column = 10, row = 259 } } (FunctionOrValue ["ParserFast"] "oneOf3"),Node { end = { column = 42, row = 260 }, start = { column = 13, row = 260 } } (ParenthesizedExpression (Node { end = { column = 41, row = 260 }, start = { column = 14, row = 260 } } (Application [Node { end = { column = 31, row = 260 }, start = { column = 14, row = 260 } } (FunctionOrValue ["ParserFast"] "symbol"),Node { end = { column = 36, row = 260 }, start = { column = 32, row = 260 } } (Literal "\""),Node { end = { column = 41, row = 260 }, start = { column = 37, row = 260 } } (Literal "\"")]))),Node { end = { column = 85, row = 261 }, start = { column = 13, row = 261 } } (ParenthesizedExpression (Node { end = { column = 84, row = 261 }, start = { column = 14, row = 261 } } (Application [Node { end = { column = 41, row = 261 }, start = { column = 14, row = 261 } } (FunctionOrValue ["ParserFast"] "symbolFollowedBy"),Node { end = { column = 46, row = 261 }, start = { column = 42, row = 261 } } (Literal "\\"),Node { end = { column = 84, row = 261 }, start = { column = 47, row = 261 } } (ParenthesizedExpression (Node { end = { column = 83, row = 261 }, start = { column = 48, row = 261 } } (Application [Node { end = { column = 67, row = 261 }, start = { column = 48, row = 261 } } (FunctionOrValue [] "escapedCharValueMap"),Node { end = { column = 83, row = 261 }, start = { column = 68, row = 261 } } (FunctionOrValue ["String"] "fromChar")])))]))),Node { end = { column = 61, row = 262 }, start = { column = 13, row = 262 } } (ParenthesizedExpression (Node { end = { column = 60, row = 262 }, start = { column = 14, row = 262 } } (Application [Node { end = { column = 30, row = 262 }, start = { column = 14, row = 262 } } (FunctionOrValue ["ParserFast"] "while"),Node { end = { column = 60, row = 262 }, start = { column = 31, row = 262 } } (ParenthesizedExpression (Node { end = { column = 59, row = 262 }, start = { column = 32, row = 262 } } (LambdaExpression { args = [Node { end = { column = 34, row = 262 }, start = { column = 33, row = 262 } } (VarPattern "c")], expression = Node { end = { column = 59, row = 262 }, start = { column = 38, row = 262 } } (OperatorApplication "&&" Right (Node { end = { column = 46, row = 262 }, start = { column = 38, row = 262 } } (OperatorApplication "/=" Non (Node { end = { column = 39, row = 262 }, start = { column = 38, row = 262 } } (FunctionOrValue [] "c")) (Node { end = { column = 46, row = 262 }, start = { column = 43, row = 262 } } (CharLiteral '"')))) (Node { end = { column = 59, row = 262 }, start = { column = 50, row = 262 } } (OperatorApplication "/=" Non (Node { end = { column = 51, row = 262 }, start = { column = 50, row = 262 } } (FunctionOrValue [] "c")) (Node { end = { column = 59, row = 262 }, start = { column = 55, row = 262 } } (CharLiteral '\\'))))) })))])))]))),Node { end = { column = 11, row = 264 }, start = { column = 9, row = 264 } } (Literal ""),Node { end = { column = 10, row = 267 }, start = { column = 9, row = 265 } } (ParenthesizedExpression (Node { end = { column = 37, row = 266 }, start = { column = 10, row = 265 } } (LambdaExpression { args = [Node { end = { column = 20, row = 265 }, start = { column = 11, row = 265 } } (VarPattern "extension"),Node { end = { column = 26, row = 265 }, start = { column = 21, row = 265 } } (VarPattern "soFar")], expression = Node { end = { column = 37, row = 266 }, start = { column = 13, row = 266 } } (OperatorApplication "++" Right (Node { end = { column = 18, row = 266 }, start = { column = 13, row = 266 } } (FunctionOrValue [] "soFar")) (Node { end = { column = 37, row = 266 }, start = { column = 22, row = 266 } } (OperatorApplication "++" Right (Node { end = { column = 31, row = 266 }, start = { column = 22, row = 266 } } (FunctionOrValue [] "extension")) (Node { end = { column = 37, row = 266 }, start = { column = 35, row = 266 } } (Literal ""))))) }))),Node { end = { column = 17, row = 268 }, start = { column = 9, row = 268 } } (FunctionOrValue [] "identity")]), name = Node { end = { column = 48, row = 257 }, start = { column = 1, row = 257 } } "tripleQuotedStringLiteralOfterTripleDoubleQuote" }, documentation = Nothing, signature = Just (Node { end = { column = 75, row = 256 }, start = { column = 1, row = 256 } } { name = Node { end = { column = 48, row = 256 }, start = { column = 1, row = 256 } } "tripleQuotedStringLiteralOfterTripleDoubleQuote", typeAnnotation = Node { end = { column = 75, row = 256 }, start = { column = 51, row = 256 } } (Typed (Node { end = { column = 68, row = 256 }, start = { column = 51, row = 256 } } (["ParserFast"],"Parser")) [Node { end = { column = 75, row = 256 }, start = { column = 69, row = 256 } } (Typed (Node { end = { column = 75, row = 256 }, start = { column = 69, row = 256 } } ([],"String")) [])]) }) }),Node { end = { column = 22, row = 276 }, start = { column = 1, row = 271 } } (FunctionDeclaration { declaration = Node { end = { column = 22, row = 276 }, start = { column = 1, row = 272 } } { arguments = [], expression = Node { end = { column = 22, row = 276 }, start = { column = 5, row = 273 } } (Application [Node { end = { column = 57, row = 273 }, start = { column = 5, row = 273 } } (FunctionOrValue ["ParserFast"] "ifFollowedByWhileValidateWithoutLinebreak"),Node { end = { column = 21, row = 274 }, start = { column = 9, row = 274 } } (FunctionOrValue ["Char"] "isLower"),Node { end = { column = 31, row = 275 }, start = { column = 9, row = 275 } } (FunctionOrValue [] "isAlphaNumOrUnderscore"),Node { end = { column = 22, row = 276 }, start = { column = 9, row = 276 } } (FunctionOrValue [] "isNotReserved")]), name = Node { end = { column = 13, row = 272 }, start = { column = 1, row = 272 } } "functionName" }, documentation = Nothing, signature = Just (Node { end = { column = 40, row = 271 }, start = { column = 1, row = 271 } } { name = Node { end = { column = 13, row = 271 }, start = { column = 1, row = 271 } } "functionName", typeAnnotation = Node { end = { column = 40, row = 271 }, start = { column = 16, row = 271 } } (Typed (Node { end = { column = 33, row = 271 }, start = { column = 16, row = 271 } } (["ParserFast"],"Parser")) [Node { end = { column = 40, row = 271 }, start = { column = 34, row = 271 } } (Typed (Node { end = { column = 40, row = 271 }, start = { column = 34, row = 271 } } ([],"String")) [])]) }) }),Node { end = { column = 22, row = 284 }, start = { column = 1, row = 279 } } (FunctionDeclaration { declaration = Node { end = { column = 22, row = 284 }, start = { column = 1, row = 280 } } { arguments = [], expression = Node { end = { column = 22, row = 284 }, start = { column = 5, row = 281 } } (Application [Node { end = { column = 69, row = 281 }, start = { column = 5, row = 281 } } (FunctionOrValue ["ParserFast"] "ifFollowedByWhileValidateMapWithRangeWithoutLinebreak"),Node { end = { column = 74, row = 281 }, start = { column = 70, row = 281 } } (FunctionOrValue [] "Node"),Node { end = { column = 21, row = 282 }, start = { column = 9, row = 282 } } (FunctionOrValue ["Char"] "isLower"),Node { end = { column = 31, row = 283 }, start = { column = 9, row = 283 } } (FunctionOrValue [] "isAlphaNumOrUnderscore"),Node { end = { column = 22, row = 284 }, start = { column = 9, row = 284 } } (FunctionOrValue [] "isNotReserved")]), name = Node { end = { column = 17, row = 280 }, start = { column = 1, row = 280 } } "functionNameNode" }, documentation = Nothing, signature = Just (Node { end = { column = 51, row = 279 }, start = { column = 1, row = 279 } } { name = Node { end = { column = 17, row = 279 }, start = { column = 1, row = 279 } } "functionNameNode", typeAnnotation = Node { end = { column = 51, row = 279 }, start = { column = 20, row = 279 } } (Typed (Node { end = { column = 37, row = 279 }, start = { column = 20, row = 279 } } (["ParserFast"],"Parser")) [Node { end = { column = 51, row = 279 }, start = { column = 38, row = 279 } } (Typed (Node { end = { column = 43, row = 279 }, start = { column = 39, row = 279 } } ([],"Node")) [Node { end = { column = 50, row = 279 }, start = { column = 44, row = 279 } } (Typed (Node { end = { column = 50, row = 279 }, start = { column = 44, row = 279 } } ([],"String")) [])])]) }) }),Node { end = { column = 22, row = 293 }, start = { column = 1, row = 287 } } (FunctionDeclaration { declaration = Node { end = { column = 22, row = 293 }, start = { column = 1, row = 288 } } { arguments = [Node { end = { column = 46, row = 288 }, start = { column = 26, row = 288 } } (VarPattern "rangeAndNameToResult")], expression = Node { end = { column = 22, row = 293 }, start = { column = 5, row = 289 } } (Application [Node { end = { column = 69, row = 289 }, start = { column = 5, row = 289 } } (FunctionOrValue ["ParserFast"] "ifFollowedByWhileValidateMapWithRangeWithoutLinebreak"),Node { end = { column = 29, row = 290 }, start = { column = 9, row = 290 } } (FunctionOrValue [] "rangeAndNameToResult"),Node { end = { column = 21, row = 291 }, start = { column = 9, row = 291 } } (FunctionOrValue ["Char"] "isLower"),Node { end = { column = 31, row = 292 }, start = { column = 9, row = 292 } } (FunctionOrValue [] "isAlphaNumOrUnderscore"),Node { end = { column = 22, row = 293 }, start = { column = 9, row = 293 } } (FunctionOrValue [] "isNotReserved")]), name = Node { end = { column = 25, row = 288 }, start = { column = 1, row = 288 } } "functionNameMapWithRange" }, documentation = Nothing, signature = Just (Node { end = { column = 77, row = 287 }, start = { column = 1, row = 287 } } { name = Node { end = { column = 25, row = 287 }, start = { column = 1, row = 287 } } "functionNameMapWithRange", typeAnnotation = Node { end = { column = 77, row = 287 }, start = { column = 28, row = 287 } } (FunctionTypeAnnotation (Node { end = { column = 52, row = 287 }, start = { column = 28, row = 287 } } (FunctionTypeAnnotation (Node { end = { column = 34, row = 287 }, start = { column = 29, row = 287 } } (Typed (Node { end = { column = 34, row = 287 }, start = { column = 29, row = 287 } } ([],"Range")) [])) (Node { end = { column = 51, row = 287 }, start = { column = 38, row = 287 } } (FunctionTypeAnnotation (Node { end = { column = 44, row = 287 }, start = { column = 38, row = 287 } } (Typed (Node { end = { column = 44, row = 287 }, start = { column = 38, row = 287 } } ([],"String")) [])) (Node { end = { column = 51, row = 287 }, start = { column = 48, row = 287 } } (GenericType "res")))))) (Node { end = { column = 77, row = 287 }, start = { column = 56, row = 287 } } (Typed (Node { end = { column = 73, row = 287 }, start = { column = 56, row = 287 } } (["ParserFast"],"Parser")) [Node { end = { column = 77, row = 287 }, start = { column = 74, row = 287 } } (GenericType "res")]))) }) }),Node { end = { column = 57, row = 301 }, start = { column = 1, row = 296 } } (FunctionDeclaration { declaration = Node { end = { column = 57, row = 301 }, start = { column = 1, row = 297 } } { arguments = [], expression = Node { end = { column = 57, row = 301 }, start = { column = 5, row = 298 } } (Application [Node { end = { column = 69, row = 298 }, start = { column = 5, row = 298 } } (FunctionOrValue ["ParserFast"] "ifFollowedByWhileValidateMapWithRangeWithoutLinebreak"),Node { end = { column = 74, row = 298 }, start = { column = 70, row = 298 } } (FunctionOrValue [] "Node"),Node { end = { column = 21, row = 299 }, start = { column = 9, row = 299 } } (FunctionOrValue ["Char"] "isLower"),Node { end = { column = 31, row = 300 }, start = { column = 9, row = 300 } } (FunctionOrValue [] "isAlphaNumOrUnderscore"),Node { end = { column = 57, row = 301 }, start = { column = 9, row = 301 } } (ParenthesizedExpression (Node { end = { column = 56, row = 301 }, start = { column = 10, row = 301 } } (LambdaExpression { args = [Node { end = { column = 15, row = 301 }, start = { column = 11, row = 301 } } (VarPattern "name")], expression = Node { end = { column = 56, row = 301 }, start = { column = 19, row = 301 } } (OperatorApplication "&&" Right (Node { end = { column = 34, row = 301 }, start = { column = 19, row = 301 } } (OperatorApplication "/=" Non (Node { end = { column = 23, row = 301 }, start = { column = 19, row = 301 } } (FunctionOrValue [] "name")) (Node { end = { column = 34, row = 301 }, start = { column = 27, row = 301 } } (Literal "infix")))) (Node { end = { column = 56, row = 301 }, start = { column = 38, row = 301 } } (Application [Node { end = { column = 51, row = 301 }, start = { column = 38, row = 301 } } (FunctionOrValue [] "isNotReserved"),Node { end = { column = 56, row = 301 }, start = { column = 52, row = 301 } } (FunctionOrValue [] "name")]))) })))]), name = Node { end = { column = 25, row = 297 }, start = { column = 1, row = 297 } } "functionNameNotInfixNode" }, documentation = Nothing, signature = Just (Node { end = { column = 59, row = 296 }, start = { column = 1, row = 296 } } { name = Node { end = { column = 25, row = 296 }, start = { column = 1, row = 296 } } "functionNameNotInfixNode", typeAnnotation = Node { end = { column = 59, row = 296 }, start = { column = 28, row = 296 } } (Typed (Node { end = { column = 45, row = 296 }, start = { column = 28, row = 296 } } (["ParserFast"],"Parser")) [Node { end = { column = 59, row = 296 }, start = { column = 46, row = 296 } } (Typed (Node { end = { column = 51, row = 296 }, start = { column = 47, row = 296 } } ([],"Node")) [Node { end = { column = 58, row = 296 }, start = { column = 52, row = 296 } } (Typed (Node { end = { column = 58, row = 296 }, start = { column = 52, row = 296 } } ([],"String")) [])])]) }) }),Node { end = { column = 31, row = 308 }, start = { column = 1, row = 304 } } (FunctionDeclaration { declaration = Node { end = { column = 31, row = 308 }, start = { column = 1, row = 305 } } { arguments = [], expression = Node { end = { column = 31, row = 308 }, start = { column = 5, row = 306 } } (Application [Node { end = { column = 49, row = 306 }, start = { column = 5, row = 306 } } (FunctionOrValue ["ParserFast"] "ifFollowedByWhileWithoutLinebreak"),Node { end = { column = 21, row = 307 }, start = { column = 9, row = 307 } } (FunctionOrValue ["Char"] "isUpper"),Node { end = { column = 31, row = 308 }, start = { column = 9, row = 308 } } (FunctionOrValue [] "isAlphaNumOrUnderscore")]), name = Node { end = { column = 9, row = 305 }, start = { column = 1, row = 305 } } "typeName" }, documentation = Nothing, signature = Just (Node { end = { column = 36, row = 304 }, start = { column = 1, row = 304 } } { name = Node { end = { column = 9, row = 304 }, start = { column = 1, row = 304 } } "typeName", typeAnnotation = Node { end = { column = 36, row = 304 }, start = { column = 12, row = 304 } } (Typed (Node { end = { column = 29, row = 304 }, start = { column = 12, row = 304 } } (["ParserFast"],"Parser")) [Node { end = { column = 36, row = 304 }, start = { column = 30, row = 304 } } (Typed (Node { end = { column = 36, row = 304 }, start = { column = 30, row = 304 } } ([],"String")) [])]) }) }),Node { end = { column = 31, row = 315 }, start = { column = 1, row = 311 } } (FunctionDeclaration { declaration = Node { end = { column = 31, row = 315 }, start = { column = 1, row = 312 } } { arguments = [Node { end = { column = 39, row = 312 }, start = { column = 22, row = 312 } } (VarPattern "rangeAndNameToRes")], expression = Node { end = { column = 31, row = 315 }, start = { column = 5, row = 313 } } (Application [Node { end = { column = 61, row = 313 }, start = { column = 5, row = 313 } } (FunctionOrValue ["ParserFast"] "ifFollowedByWhileMapWithRangeWithoutLinebreak"),Node { end = { column = 79, row = 313 }, start = { column = 62, row = 313 } } (FunctionOrValue [] "rangeAndNameToRes"),Node { end = { column = 21, row = 314 }, start = { column = 9, row = 314 } } (FunctionOrValue ["Char"] "isUpper"),Node { end = { column = 31, row = 315 }, start = { column = 9, row = 315 } } (FunctionOrValue [] "isAlphaNumOrUnderscore")]), name = Node { end = { column = 21, row = 312 }, start = { column = 1, row = 312 } } "typeNameMapWithRange" }, documentation = Nothing, signature = Just (Node { end = { column = 73, row = 311 }, start = { column = 1, row = 311 } } { name = Node { end = { column = 21, row = 311 }, start = { column = 1, row = 311 } } "typeNameMapWithRange", typeAnnotation = Node { end = { column = 73, row = 311 }, start = { column = 24, row = 311 } } (FunctionTypeAnnotation (Node { end = { column = 48, row = 311 }, start = { column = 24, row = 311 } } (FunctionTypeAnnotation (Node { end = { column = 30, row = 311 }, start = { column = 25, row = 311 } } (Typed (Node { end = { column = 30, row = 311 }, start = { column = 25, row = 311 } } ([],"Range")) [])) (Node { end = { column = 47, row = 311 }, start = { column = 34, row = 311 } } (FunctionTypeAnnotation (Node { end = { column = 40, row = 311 }, start = { column = 34, row = 311 } } (Typed (Node { end = { column = 40, row = 311 }, start = { column = 34, row = 311 } } ([],"String")) [])) (Node { end = { column = 47, row = 311 }, start = { column = 44, row = 311 } } (GenericType "res")))))) (Node { end = { column = 73, row = 311 }, start = { column = 52, row = 311 } } (Typed (Node { end = { column = 69, row = 311 }, start = { column = 52, row = 311 } } (["ParserFast"],"Parser")) [Node { end = { column = 73, row = 311 }, start = { column = 70, row = 311 } } (GenericType "res")]))) }) }),Node { end = { column = 31, row = 322 }, start = { column = 1, row = 318 } } (FunctionDeclaration { declaration = Node { end = { column = 31, row = 322 }, start = { column = 1, row = 319 } } { arguments = [], expression = Node { end = { column = 31, row = 322 }, start = { column = 5, row = 320 } } (Application [Node { end = { column = 61, row = 320 }, start = { column = 5, row = 320 } } (FunctionOrValue ["ParserFast"] "ifFollowedByWhileMapWithRangeWithoutLinebreak"),Node { end = { column = 66, row = 320 }, start = { column = 62, row = 320 } } (FunctionOrValue [] "Node"),Node { end = { column = 21, row = 321 }, start = { column = 9, row = 321 } } (FunctionOrValue ["Char"] "isUpper"),Node { end = { column = 31, row = 322 }, start = { column = 9, row = 322 } } (FunctionOrValue [] "isAlphaNumOrUnderscore")]), name = Node { end = { column = 13, row = 319 }, start = { column = 1, row = 319 } } "typeNameNode" }, documentation = Nothing, signature = Just (Node { end = { column = 47, row = 318 }, start = { column = 1, row = 318 } } { name = Node { end = { column = 13, row = 318 }, start = { column = 1, row = 318 } } "typeNameNode", typeAnnotation = Node { end = { column = 47, row = 318 }, start = { column = 16, row = 318 } } (Typed (Node { end = { column = 33, row = 318 }, start = { column = 16, row = 318 } } (["ParserFast"],"Parser")) [Node { end = { column = 47, row = 318 }, start = { column = 34, row = 318 } } (Typed (Node { end = { column = 39, row = 318 }, start = { column = 35, row = 318 } } ([],"Node")) [Node { end = { column = 46, row = 318 }, start = { column = 40, row = 318 } } (Typed (Node { end = { column = 46, row = 318 }, start = { column = 40, row = 318 } } ([],"String")) [])])]) }) }),Node { end = { column = 18, row = 401 }, start = { column = 1, row = 325 } } (FunctionDeclaration { declaration = Node { end = { column = 18, row = 401 }, start = { column = 1, row = 326 } } { arguments = [Node { end = { column = 51, row = 326 }, start = { column = 24, row = 326 } } (VarPattern "operatorCandidateToValidate")], expression = Node { end = { column = 18, row = 401 }, start = { column = 5, row = 327 } } (CaseExpression { cases = [[Node { end = { column = 13, row = 328 }, start = { column = 9, row = 328 } } (StringPattern "=="),Node { end = { column = 17, row = 329 }, start = { column = 13, row = 329 } } (FunctionOrValue [] "True")],[Node { end = { column = 13, row = 331 }, start = { column = 9, row = 331 } } (StringPattern "/="),Node { end = { column = 17, row = 332 }, start = { column = 13, row = 332 } } (FunctionOrValue [] "True")],[Node { end = { column = 13, row = 334 }, start = { column = 9, row = 334 } } (StringPattern "::"),Node { end = { column = 17, row = 335 }, start = { column = 13, row = 335 } } (FunctionOrValue [] "True")],[Node { end = { column = 13, row = 337 }, start = { column = 9, row = 337 } } (StringPattern "++"),Node { end = { column = 17, row = 338 }, start = { column = 13, row = 338 } } (FunctionOrValue [] "True")],[Node { end = { column = 12, row = 340 }, start = { column = 9, row = 340 } } (StringPattern "+"),Node { end = { column = 17, row = 341 }, start = { column = 13, row = 341 } } (FunctionOrValue [] "True")],[Node { end = { column = 12, row = 343 }, start = { column = 9, row = 343 } } (StringPattern "*"),Node { end = { column = 17, row = 344 }, start = { column = 13, row = 344 } } (FunctionOrValue [] "True")],[Node { end = { column = 13, row = 346 }, start = { column = 9, row = 346 } } (StringPattern "<|"),Node { end = { column = 17, row = 347 }, start = { column = 13, row = 347 } } (FunctionOrValue [] "True")],[Node { end = { column = 13, row = 349 }, start = { column = 9, row = 349 } } (StringPattern "|>"),Node { end = { column = 17, row = 350 }, start = { column = 13, row = 350 } } (FunctionOrValue [] "True")],[Node { end = { column = 13, row = 352 }, start = { column = 9, row = 352 } } (StringPattern "||"),Node { end = { column = 17, row = 353 }, start = { column = 13, row = 353 } } (FunctionOrValue [] "True")],[Node { end = { column = 13, row = 355 }, start = { column = 9, row = 355 } } (StringPattern "<="),Node { end = { column = 17, row = 356 }, start = { column = 13, row = 356 } } (FunctionOrValue [] "True")],[Node { end = { column = 13, row = 358 }, start = { column = 9, row = 358 } } (StringPattern ">="),Node { end = { column = 17, row = 359 }, start = { column = 13, row = 359 } } (FunctionOrValue [] "True")],[Node { end = { column = 13, row = 361 }, start = { column = 9, row = 361 } } (StringPattern "|="),Node { end = { column = 17, row = 362 }, start = { column = 13, row = 362 } } (FunctionOrValue [] "True")],[Node { end = { column = 13, row = 364 }, start = { column = 9, row = 364 } } (StringPattern "|."),Node { end = { column = 17, row = 365 }, start = { column = 13, row = 365 } } (FunctionOrValue [] "True")],[Node { end = { column = 13, row = 367 }, start = { column = 9, row = 367 } } (StringPattern "//"),Node { end = { column = 17, row = 368 }, start = { column = 13, row = 368 } } (FunctionOrValue [] "True")],[Node { end = { column = 14, row = 370 }, start = { column = 9, row = 370 } } (StringPattern "</>"),Node { end = { column = 17, row = 371 }, start = { column = 13, row = 371 } } (FunctionOrValue [] "True")],[Node { end = { column = 14, row = 373 }, start = { column = 9, row = 373 } } (StringPattern "<?>"),Node { end = { column = 17, row = 374 }, start = { column = 13, row = 374 } } (FunctionOrValue [] "True")],[Node { end = { column = 12, row = 376 }, start = { column = 9, row = 376 } } (StringPattern "^"),Node { end = { column = 17, row = 377 }, start = { column = 13, row = 377 } } (FunctionOrValue [] "True")],[Node { end = { column = 13, row = 379 }, start = { column = 9, row = 379 } } (StringPattern "<<"),Node { end = { column = 17, row = 380 }, start = { column = 13, row = 380 } } (FunctionOrValue [] "True")],[Node { end = { column = 13, row = 382 }, start = { column = 9, row = 382 } } (StringPattern ">>"),Node { end = { column = 17, row = 383 }, start = { column = 13, row = 383 } } (FunctionOrValue [] "True")],[Node { end = { column = 12, row = 385 }, start = { column = 9, row = 385 } } (StringPattern "<"),Node { end = { column = 17, row = 386 }, start = { column = 13, row = 386 } } (FunctionOrValue [] "True")],[Node { end = { column = 12, row = 388 }, start = { column = 9, row = 388 } } (StringPattern ">"),Node { end = { column = 17, row = 389 }, start = { column = 13, row = 389 } } (FunctionOrValue [] "True")],[Node { end = { column = 12, row = 391 }, start = { column = 9, row = 391 } } (StringPattern "/"),Node { end = { column = 17, row = 392 }, start = { column = 13, row = 392 } } (FunctionOrValue [] "True")],[Node { end = { column = 13, row = 394 }, start = { column = 9, row = 394 } } (StringPattern "&&"),Node { end = { column = 17, row = 395 }, start = { column = 13, row = 395 } } (FunctionOrValue [] "True")],[Node { end = { column = 12, row = 397 }, start = { column = 9, row = 397 } } (StringPattern "-"),Node { end = { column = 17, row = 398 }, start = { column = 13, row = 398 } } (FunctionOrValue [] "True")],[Node { end = { column = 10, row = 400 }, start = { column = 9, row = 400 } } AllPattern,Node { end = { column = 18, row = 401 }, start = { column = 13, row = 401 } } (FunctionOrValue [] "False")]], expression = Node { end = { column = 37, row = 327 }, start = { column = 10, row = 327 } } (FunctionOrValue [] "operatorCandidateToValidate") }), name = Node { end = { column = 23, row = 326 }, start = { column = 1, row = 326 } } "isAllowedOperatorToken" }, documentation = Nothing, signature = Just (Node { end = { column = 40, row = 325 }, start = { column = 1, row = 325 } } { name = Node { end = { column = 23, row = 325 }, start = { column = 1, row = 325 } } "isAllowedOperatorToken", typeAnnotation = Node { end = { column = 40, row = 325 }, start = { column = 26, row = 325 } } (FunctionTypeAnnotation (Node { end = { column = 32, row = 325 }, start = { column = 26, row = 325 } } (Typed (Node { end = { column = 32, row = 325 }, start = { column = 26, row = 325 } } ([],"String")) [])) (Node { end = { column = 40, row = 325 }, start = { column = 36, row = 325 } } (Typed (Node { end = { column = 40, row = 325 }, start = { column = 36, row = 325 } } ([],"Bool")) []))) }) }),Node { end = { column = 18, row = 447 }, start = { column = 1, row = 404 } } (FunctionDeclaration { declaration = Node { end = { column = 18, row = 447 }, start = { column = 1, row = 405 } } { arguments = [Node { end = { column = 23, row = 405 }, start = { column = 22, row = 405 } } (VarPattern "c")], expression = Node { end = { column = 18, row = 447 }, start = { column = 5, row = 406 } } (CaseExpression { cases = [[Node { end = { column = 12, row = 407 }, start = { column = 9, row = 407 } } (CharPattern '+'),Node { end = { column = 17, row = 408 }, start = { column = 13, row = 408 } } (FunctionOrValue [] "True")],[Node { end = { column = 12, row = 410 }, start = { column = 9, row = 410 } } (CharPattern '-'),Node { end = { column = 17, row = 411 }, start = { column = 13, row = 411 } } (FunctionOrValue [] "True")],[Node { end = { column = 12, row = 413 }, start = { column = 9, row = 413 } } (CharPattern '/'),Node { end = { column = 17, row = 414 }, start = { column = 13, row = 414 } } (FunctionOrValue [] "True")],[Node { end = { column = 12, row = 416 }, start = { column = 9, row = 416 } } (CharPattern '*'),Node { end = { column = 17, row = 417 }, start = { column = 13, row = 417 } } (FunctionOrValue [] "True")],[Node { end = { column = 12, row = 419 }, start = { column = 9, row = 419 } } (CharPattern '='),Node { end = { column = 17, row = 420 }, start = { column = 13, row = 420 } } (FunctionOrValue [] "True")],[Node { end = { column = 12, row = 422 }, start = { column = 9, row = 422 } } (CharPattern '.'),Node { end = { column = 17, row = 423 }, start = { column = 13, row = 423 } } (FunctionOrValue [] "True")],[Node { end = { column = 12, row = 425 }, start = { column = 9, row = 425 } } (CharPattern '<'),Node { end = { column = 17, row = 426 }, start = { column = 13, row = 426 } } (FunctionOrValue [] "True")],[Node { end = { column = 12, row = 428 }, start = { column = 9, row = 428 } } (CharPattern '>'),Node { end = { column = 17, row = 429 }, start = { column = 13, row = 429 } } (FunctionOrValue [] "True")],[Node { end = { column = 12, row = 431 }, start = { column = 9, row = 431 } } (CharPattern ':'),Node { end = { column = 17, row = 432 }, start = { column = 13, row = 432 } } (FunctionOrValue [] "True")],[Node { end = { column = 12, row = 434 }, start = { column = 9, row = 434 } } (CharPattern '&'),Node { end = { column = 17, row = 435 }, start = { column = 13, row = 435 } } (FunctionOrValue [] "True")],[Node { end = { column = 12, row = 437 }, start = { column = 9, row = 437 } } (CharPattern '|'),Node { end = { column = 17, row = 438 }, start = { column = 13, row = 438 } } (FunctionOrValue [] "True")],[Node { end = { column = 12, row = 440 }, start = { column = 9, row = 440 } } (CharPattern '^'),Node { end = { column = 17, row = 441 }, start = { column = 13, row = 441 } } (FunctionOrValue [] "True")],[Node { end = { column = 12, row = 443 }, start = { column = 9, row = 443 } } (CharPattern '?'),Node { end = { column = 17, row = 444 }, start = { column = 13, row = 444 } } (FunctionOrValue [] "True")],[Node { end = { column = 10, row = 446 }, start = { column = 9, row = 446 } } AllPattern,Node { end = { column = 18, row = 447 }, start = { column = 13, row = 447 } } (FunctionOrValue [] "False")]], expression = Node { end = { column = 11, row = 406 }, start = { column = 10, row = 406 } } (FunctionOrValue [] "c") }), name = Node { end = { column = 21, row = 405 }, start = { column = 1, row = 405 } } "isOperatorSymbolChar" }, documentation = Nothing, signature = Just (Node { end = { column = 36, row = 404 }, start = { column = 1, row = 404 } } { name = Node { end = { column = 21, row = 404 }, start = { column = 1, row = 404 } } "isOperatorSymbolChar", typeAnnotation = Node { end = { column = 36, row = 404 }, start = { column = 24, row = 404 } } (FunctionTypeAnnotation (Node { end = { column = 28, row = 404 }, start = { column = 24, row = 404 } } (Typed (Node { end = { column = 28, row = 404 }, start = { column = 24, row = 404 } } ([],"Char")) [])) (Node { end = { column = 36, row = 404 }, start = { column = 32, row = 404 } } (Typed (Node { end = { column = 36, row = 404 }, start = { column = 32, row = 404 } } ([],"Bool")) []))) }) }),Node { end = { column = 29, row = 452 }, start = { column = 1, row = 450 } } (FunctionDeclaration { declaration = Node { end = { column = 29, row = 452 }, start = { column = 1, row = 451 } } { arguments = [], expression = Node { end = { column = 29, row = 452 }, start = { column = 5, row = 452 } } (Application [Node { end = { column = 22, row = 452 }, start = { column = 5, row = 452 } } (FunctionOrValue ["ParserFast"] "symbol"),Node { end = { column = 26, row = 452 }, start = { column = 23, row = 452 } } (Literal "="),Node { end = { column = 29, row = 452 }, start = { column = 27, row = 452 } } UnitExpr]), name = Node { end = { column = 6, row = 451 }, start = { column = 1, row = 451 } } "equal" }, documentation = Nothing, signature = Just (Node { end = { column = 29, row = 450 }, start = { column = 1, row = 450 } } { name = Node { end = { column = 6, row = 450 }, start = { column = 1, row = 450 } } "equal", typeAnnotation = Node { end = { column = 29, row = 450 }, start = { column = 9, row = 450 } } (Typed (Node { end = { column = 26, row = 450 }, start = { column = 9, row = 450 } } (["ParserFast"],"Parser")) [Node { end = { column = 29, row = 450 }, start = { column = 27, row = 450 } } Unit]) }) }),Node { end = { column = 29, row = 457 }, start = { column = 1, row = 455 } } (FunctionDeclaration { declaration = Node { end = { column = 29, row = 457 }, start = { column = 1, row = 456 } } { arguments = [], expression = Node { end = { column = 29, row = 457 }, start = { column = 5, row = 457 } } (Application [Node { end = { column = 22, row = 457 }, start = { column = 5, row = 457 } } (FunctionOrValue ["ParserFast"] "symbol"),Node { end = { column = 26, row = 457 }, start = { column = 23, row = 457 } } (Literal ")"),Node { end = { column = 29, row = 457 }, start = { column = 27, row = 457 } } UnitExpr]), name = Node { end = { column = 10, row = 456 }, start = { column = 1, row = 456 } } "parensEnd" }, documentation = Nothing, signature = Just (Node { end = { column = 33, row = 455 }, start = { column = 1, row = 455 } } { name = Node { end = { column = 10, row = 455 }, start = { column = 1, row = 455 } } "parensEnd", typeAnnotation = Node { end = { column = 33, row = 455 }, start = { column = 13, row = 455 } } (Typed (Node { end = { column = 30, row = 455 }, start = { column = 13, row = 455 } } (["ParserFast"],"Parser")) [Node { end = { column = 33, row = 455 }, start = { column = 31, row = 455 } } Unit]) }) })], imports = [Node { end = { column = 12, row = 23 }, start = { column = 1, row = 23 } } { exposingList = Nothing, moduleAlias = Nothing, moduleName = Node { end = { column = 12, row = 23 }, start = { column = 8, row = 23 } } ["Char"] },Node { end = { column = 43, row = 24 }, start = { column = 1, row = 24 } } { exposingList = Just (Node { end = { column = 43, row = 24 }, start = { column = 24, row = 24 } } (Explicit [Node { end = { column = 42, row = 24 }, start = { column = 34, row = 24 } } (TypeExpose { name = "Node", open = Just { end = { column = 42, row = 24 }, start = { column = 38, row = 24 } } })])), moduleAlias = Nothing, moduleName = Node { end = { column = 23, row = 24 }, start = { column = 8, row = 24 } } ["Elm","Syntax","Node"] },Node { end = { column = 41, row = 25 }, start = { column = 1, row = 25 } } { exposingList = Just (Node { end = { column = 41, row = 25 }, start = { column = 25, row = 25 } } (Explicit [Node { end = { column = 40, row = 25 }, start = { column = 35, row = 25 } } (TypeOrAliasExpose "Range")])), moduleAlias = Nothing, moduleName = Node { end = { column = 24, row = 25 }, start = { column = 8, row = 25 } } ["Elm","Syntax","Range"] },Node { end = { column = 18, row = 26 }, start = { column = 1, row = 26 } } { exposingList = Nothing, moduleAlias = Nothing, moduleName = Node { end = { column = 18, row = 26 }, start = { column = 8, row = 26 } } ["ParserFast"] }], moduleDefinition = Node { end = { column = 6, row = 9 }, start = { column = 1, row = 1 } } (NormalModule { exposingList = Node { end = { column = 6, row = 9 }, start = { column = 26, row = 1 } } (Explicit [Node { end = { column = 14, row = 3 }, start = { column = 7, row = 3 } } (FunctionExpose "inToken"),Node { end = { column = 12, row = 4 }, start = { column = 7, row = 4 } } (FunctionExpose "equal"),Node { end = { column = 23, row = 4 }, start = { column = 14, row = 4 } } (FunctionExpose "parensEnd"),Node { end = { column = 29, row = 5 }, start = { column = 7, row = 5 } } (FunctionExpose "isAllowedOperatorToken"),Node { end = { column = 51, row = 5 }, start = { column = 31, row = 5 } } (FunctionExpose "isOperatorSymbolChar"),Node { end = { column = 35, row = 6 }, start = { column = 7, row = 6 } } (FunctionExpose "characterLiteralMapWithRange"),Node { end = { column = 82, row = 6 }, start = { column = 37, row = 6 } } (FunctionExpose "singleOrTripleQuotedStringLiteralMapWithRange"),Node { end = { column = 19, row = 7 }, start = { column = 7, row = 7 } } (FunctionExpose "functionName"),Node { end = { column = 37, row = 7 }, start = { column = 21, row = 7 } } (FunctionExpose "functionNameNode"),Node { end = { column = 63, row = 7 }, start = { column = 39, row = 7 } } (FunctionExpose "functionNameMapWithRange"),Node { end = { column = 89, row = 7 }, start = { column = 65, row = 7 } } (FunctionExpose "functionNameNotInfixNode"),Node { end = { column = 15, row = 8 }, start = { column = 7, row = 8 } } (FunctionExpose "typeName"),Node { end = { column = 29, row = 8 }, start = { column = 17, row = 8 } } (FunctionExpose "typeNameNode"),Node { end = { column = 51, row = 8 }, start = { column = 31, row = 8 } } (FunctionExpose "typeNameMapWithRange")]), moduleName = Node { end = { column = 25, row = 1 }, start = { column = 8, row = 1 } } ["Elm","Parser","Tokens"] }) }